/*
- every template asset is stored in "template" directory
- different asset classes are in different directories:
theme
book
layout
background
img

- under asset directories, each user has its own directory
- directories starting with _ are reserved for the system
*/

Theme: collection of book templates
Usage: Design-pick_template

/theme/_develop/basic_theme.js
{
	name: "Basic",
	books: ['book-_develop-basic_8x11']
	screenshots:
}

/book/_develop/basic_8x11.js

{
	width: 8;
	height:11;
	layouts: ['layout-_develop-8x11-3-HHH']

}

/layout/_develop/8x11-3-HHH.js
{
	type: cover|flap|back-flap|front-flap
	image_count: 3
}


Unique identifiers:
- every template object has a unique identifer that points to a json file

def templateIdToFile(id)
	type, user, typeId = id.split('-', 3)
	raise "bad id" unless type && user && typeId
	raise "bad type" unless type ~= /^(theme|book|layout|background|img)$/
	raise "bad user" unless user ~= /^_*\w+$/
	raise "bad type id" unless typeId ~= /^(\d|\w|_)+$/
	File.join(SvegSettings.book_templates_dir, type, user, typeId + ".json")
end


Brainstorm:
This week implementation:
Create a book, with basic pages

Walkthrough:
Get a theme, display list of sizes, images
Pick one, create the book:
- each page gets the initial layout. How?
How does layout generate html?
Layout API:

Layout decides:
- what images are on the page
- where to auto-place images
- what editing controls are available for the image
- size of the page

The flow:
layout->createPage(jsPage) -> fills in jsPage with layout html.
what does layoutHtml looks like?
we can't use any css for layoutHtml, all css is inlined
<div class='page'> // css: width/height
	<img src='/photo/2

var LayoutMaster = {

}

var LayoutWrapper = function() {

};
